def targetFolder = "src/main/assets"
def modelDownloadUrl = "http://storage.googleapis.com/download.tensorflow.org/models/tflite/conv_actions_tflite.zip"
def localCache = "build/intermediates/conv_actions_tflite.zip"

class DownloadUrlTask extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}

task downloadModel(type: DownloadUrlTask) {
    doFirst {
        println "Downloading ${modelDownloadUrl}"
    }
    sourceUrl = "${modelDownloadUrl}"
    target = file("${localCache}")
}

task unzipModel(type: Copy, dependsOn: 'downloadModel') {
    doFirst {
        println "Unzipping ${localCache}"
    }
    from zipTree("${localCache}")
    into "${targetFolder}"
}

task cleanUnusedFiles(type: Delete, dependsOn: ['unzipModel']) {
    delete fileTree("${targetFolder}").matching {
        include "*.pb"
        include "*.ckpt.*"
        include "*.pbtxt*"
        include "*.quant_info.*"
        include "*.meta"
    }
}

preBuild.dependsOn unzipModel
preBuild.dependsOn cleanUnusedFiles
